function onOpen() {
  const ui = SpreadsheetApp.getUi();

  // Create submenus
  const KeyMenu = ui.createMenu('Key Sheet Tools')
    .addItem('Remove Common Words', 'removeCommonWords')
    .addItem('Split Near Suggested_IDs', 'addNSuffixForNear')
    .addItem('Recalculate Confidence', 'calculateGroupConfidence')
    .addItem('Update Cell Shading', 'updateSerialOnKeySheet');

  const OriginalMenu = ui.createMenu('Original Sheet Tools')
    .addItem('Populate Blank Catalog Numbers', 'fillBlankCatalogNumbers')
    .addItem('Populate Final Name from Key', 'fillFinalNameFormulas');

  // Main menu with nested submenus
  ui.createMenu('BELSFish')
    .addSubMenu(KeyMenu)
    .addSubMenu(OriginalMenu)
    .addItem('Export CSV(s) for CoGe', 'exportCSVsByCounty')
    .addToUi();
}


function exportCSVsByCounty() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("To CoGe");
  const data = sheet.getDataRange().getValues();

  const headers = data[0];
  const headerLength = headers.length;

  const filteredRows = data.slice(1).filter(row => {
    const status = row[0];             // Column A: "NONE"
    const institutionCount = row[1];   // Column B: InstitutionCount
    return status === 'NONE' && Number(institutionCount) > 0;
  });

  if (filteredRows.length === 0) {
    SpreadsheetApp.getUi().alert('No rows matched the filter (NONE + InstitutionCount > 0).');
    return;
  }

  const grouped = {};

  filteredRows.forEach(row => {
    const county = row[10] || 'Blank'; // Column K is index 9, contains county
    if (!grouped[county]) grouped[county] = [];
    grouped[county].push(row.slice(0, headerLength)); // enforce same column count
  });

  const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyy-MM-dd_HH:mm:ss');
  const folder = DriveApp.createFolder('County_Exports_' + timestamp);

  for (const county in grouped) {
    let csvContent = headers.join(",") + "\n";

    grouped[county].forEach(row => {
      const cleaned = row.map(cell => `"${String(cell).replace(/"/g, '""')}"`);
      csvContent += cleaned.join(",") + "\n";
    });

    folder.createFile(`${county}_Export.csv`, csvContent, MimeType.CSV);
  }

  SpreadsheetApp.getUi().alert('CSV exports completed. Check your Google Drive.');
}

function removeCommonWords() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Key");
  const dataRange = sheet.getDataRange();
  const data = dataRange.getValues();

  // Identify column indexes
  const header = data[0];
  const idCol = header.indexOf('Final_Suggested_ID');
  const locCol = header.indexOf('normalized_locality');

  if (idCol === -1 || locCol === -1) {
    SpreadsheetApp.getUi().alert('Columns "Final_Suggested_ID" and/or "normalized_locality" not found.');
    return;
  }

  // Determine if "unique_locality" column already exists
  let outputCol = header.indexOf('unique_locality');

  // If not, create it in the first empty column
  if (outputCol === -1) {
    outputCol = header.length;
    sheet.getRange(1, outputCol + 1).setValue('unique_locality');
  }

  // Group rows by Final_Suggested_ID
  const groups = {};
  for (let i = 1; i < data.length; i++) {
    const id = data[i][idCol];
    const locality = data[i][locCol];
    if (!groups[id]) groups[id] = [];
    groups[id].push({ row: i, text: locality });
  }

  const result = new Array(data.length).fill('');
  const removeTheseWords = ["of", "and", "miles", "about"];

  for (const group of Object.values(groups)) {
    const texts = group.map(entry => entry.text);
    const wordSets = texts.map(text =>
      new Set(text.toLowerCase().match(/\b[\w’'-]+\b/g) || [])
    );

    // find common words in the group
    const commonWords = [...wordSets[0]].filter(word =>
      wordSets.every(set => set.has(word))
    );

    for (const entry of group) {
      const filtered = (entry.text.match(/\b[\w’'-]+\b/g) || [])
        .filter(word => !commonWords.includes(word.toLowerCase()))
        // post-process to remove extra common terms
        .filter(word => !removeTheseWords.includes(word.toLowerCase()))
        .join(' ');
      result[entry.row] = filtered;
    }
  }

  // Write results
  for (let i = 1; i < result.length; i++) {
    sheet.getRange(i + 1, outputCol + 1).setValue(result[i]);
  }
}


function addNSuffixForNear() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Key");
  const data = sheet.getDataRange().getValues();

  const header = data[0];
  const idCol = header.indexOf('Suggested_ID');
  const localityCol = header.indexOf('unique_locality');

  if (idCol === -1 || localityCol === -1) {
    SpreadsheetApp.getUi().alert('Missing "Suggested_ID" or "unique_locality" column.');
    return;
  }

  for (let i = 1; i < data.length; i++) {
    const locality = data[i][localityCol];
    const id = data[i][idCol];

    if (typeof locality === 'string' && locality.toLowerCase().includes('near')) {
      const updatedId = id.toString().endsWith('n') ? id : id + '_near';
      sheet.getRange(i + 1, idCol + 1).setValue(updatedId);
    }
  }

  SpreadsheetApp.getUi().alert('Suggested_ID updated where "near" was found.');
}
function calculateGroupConfidence() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Key");
  const data = sheet.getDataRange().getValues();
  const header = data[0];

  const idCol = header.indexOf('Suggested_ID');
  const normCol = header.indexOf('normalized_locality');

  if (idCol === -1 || normCol === -1) {
    SpreadsheetApp.getUi().alert('Columns "Suggested_ID" and/or "normalized_locality" not found.');
    return;
  }

  let confCol = header.indexOf('Confidence');
  if (confCol === -1) {
    confCol = header.length;
    sheet.getRange(1, confCol + 1).setValue('Confidence');
  }

  // Group normalized text by Suggested_ID
  const groups = {};
  for (let i = 1; i < data.length; i++) {
    const id = data[i][idCol];
    const text = data[i][normCol] || '';
    if (!groups[id]) groups[id] = [];
    groups[id].push({ row: i, text });
  }

  // Simple TF-IDF and cosine sim for small groups
  function tokenize(text) {
    return text.toLowerCase().match(/\b[\w\.]+\b/g) || [];
  }

  function tf(tokens) {
    const freq = {};
    tokens.forEach(t => freq[t] = (freq[t] || 0) + 1);
    const tfVec = {};
    for (let t in freq) tfVec[t] = freq[t] / tokens.length;
    return tfVec;
  }

  function cosine(vec1, vec2) {
    let dot = 0, mag1 = 0, mag2 = 0;
    const allKeys = new Set([...Object.keys(vec1), ...Object.keys(vec2)]);
    allKeys.forEach(k => {
      const a = vec1[k] || 0, b = vec2[k] || 0;
      dot += a * b;
      mag1 += a * a;
      mag2 += b * b;
    });
    return mag1 && mag2 ? dot / (Math.sqrt(mag1) * Math.sqrt(mag2)) : 0;
  }

  for (const id in groups) {
    const entries = groups[id];
    const vectors = entries.map(e => tf(tokenize(e.text)));

    let simSum = 0;
    let count = 0;
    for (let i = 0; i < vectors.length; i++) {
      for (let j = i + 1; j < vectors.length; j++) {
        simSum += cosine(vectors[i], vectors[j]);
        count++;
      }
    }

    const confidence = count > 0 ? (simSum / count * 100).toFixed(1) : '100.0';

    // Set confidence for all rows in the group
    entries.forEach(e => {
      sheet.getRange(e.row + 1, confCol + 1).setValue(confidence);
    });
  }
}
function fillBlankCatalogNumbers() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Original");
  const data = sheet.getDataRange().getValues();

  const headers = data[0];
  const catalogCol = headers.indexOf("catalogNumber");
  const qCol = 16; // Column Q is index 16 (0-based)

  if (catalogCol === -1) {
    SpreadsheetApp.getUi().alert('The column "catalogNumber" was not found.');
    return;
  }

  const updates = [];

  for (let i = 1; i < data.length; i++) {
    const catalogVal = data[i][catalogCol];
    const qVal = data[i][qCol];

    if (!catalogVal || catalogVal.toString().trim() === "") {
      if (qVal !== "" && qVal !== null) {
        updates.push([i + 1, catalogCol + 1, "ID_" + qVal.toString().trim()]);
      }
    }
  }

  // Apply the updates
  updates.forEach(([row, col, value]) => {
    sheet.getRange(row, col).setValue(value);
  });
}

function fillFinalNameFormulas() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Original");
  const data = sheet.getDataRange().getValues();
  const headers = data[0];

  const finalNameCol = headers.indexOf("FinalName");
  const zCol = 26; // Column Z is index 25 (0-based), so Z2 is row 2, column 26

  if (finalNameCol === -1) {
    SpreadsheetApp.getUi().alert('The column "FinalName" was not found.');
    return;
  }

  const startRow = 2; // Skip header
  const numRows = data.length - 1;

  const range = sheet.getRange(startRow, finalNameCol + 1, numRows);
  const formulas = [];

  for (let i = 0; i < numRows; i++) {
    const rowNum = startRow + i;
    formulas.push([`=filter(Key!I:I, Key!G:G=Z${rowNum})`]);
  }

  range.setFormulas(formulas);
}


function updateSerialOnKeySheet() {
  const sheetName = "Key";
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    SpreadsheetApp.getUi().alert(`Sheet named "${sheetName}" not found.`);
    return;
  }

  // Step 1: Check if cell A1 is labeled "Serial"
  const header = sheet.getRange("A1").getValue();
  if (header !== "Serial") {
    SpreadsheetApp.getUi().alert(`Column A1 must be labeled "Serial". Found: "${header}"`);
    return;
  }

  // Step 2: Remove completely blank rows at the bottom
  const lastRow = sheet.getLastRow();
  const lastCol = sheet.getLastColumn();
  const data = sheet.getRange(1, 1, lastRow, lastCol).getValues();

  // Loop from the bottom up to find and delete blank rows
  for (let i = data.length - 1; i >= 1; i--) {
    const row = data[i];
    const isBlank = row.every(cell => cell === "" || cell === null);
    if (isBlank) {
      sheet.deleteRow(i + 1); // account for zero-based index
    } else {
      break; // stop once non-blank row is found
    }
  }

  // Step 3: Fill A2 with 1, and A3 downward with formula
  const numRows = sheet.getLastRow();
  if (numRows < 2) return; // nothing to do

  sheet.getRange("A2").setValue(1);

  if (numRows >= 3) {
    const formulaRange = sheet.getRange(3, 1, numRows - 2); // from A3 to last row
    const formulas = [];

    for (let i = 3; i <= numRows; i++) {
      const rowFormula = `=IF(I${i}<>I${i - 1}, A${i - 1}+1, A${i - 1})`;
      formulas.push([rowFormula]);
    }

    formulaRange.setFormulas(formulas);
  }
}

